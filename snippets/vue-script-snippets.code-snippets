{
  "Vue3 Component v-model": {
    "prefix": "vcm",
    "body": [
      "const [model, modifiers] = defineModel('${1:attrName}', {",
      "  set(value) {",
      "    if (modifiers.lower) {",
      "      return value.toLowerCase()",
      "    }",
      "  }",
      "})"
    ],
    "description": "Vue3 Component two-way binding"
  },
  "Vue3 Custom Directive": {
    "prefix": "vcd",
    "body": [
      "// @see https://vuejs.org/guide/reusability/custom-directives.html#directive-hooks",
      "const v${1:Directive} = {",
      "  mounted: (el, binding) => {",
      "    el.classList.add(binding.value)",
      "  }",
      "}"
    ],
    "description": "Vue3 Custom Directives"
  },
  "Vue3 Writable Computed": {
    "prefix": "vwc",
    "body": [
      "const ${1:computedName} = computed({",
      "  get(previous) {  },",
      "  set(newValue) {  }",
      "})"
    ],
    "description": "Vue3 writable computed with the previous value"
  },
  "Vue3 WatchEffect": {
    "prefix": "vwe",
    "body": [
      "watchEffect(async(onCleanup) => {",
      "",
      "  const { response, loading, cancel } = ${1:requestName}()",
      "  onCleanup(cancel)",
      "  // todo: set value",
      "  // data.value = await response",
      "})"
    ],
    "description": "Vue3 WatchEffect"
  },
  "Vue3 Async Components": {
    "prefix": "vac",
    "body": [
      "const ${1:AsyncComp} = defineAsyncComponent({",
      "  loader: () => import(''),",
      "  loadingComponent: LoadingComponent,",
      "  errorComponent: ErrorComponent,",
      "  delay: 300,",
      "  timeout: 5000",
      "})"
    ],
    "description": "Vue3  load a component"
  },
  "Axios Get Request": {
    "prefix": "agr",
    "body": [
      "// @see https://axios-http.com/docs/req_config",
      "export function ${1:requestName}(params) {",
      "  const loading = ref(true)",
      "  const controller = new AbortController()",
      "",
      "  const response = request({",
      "    url: '${2:url}',",
      "    method: 'get',",
      "    params,",
      "    // responseType: 'blob', // 流请求",
      "    signal: controller.signal",
      "  }).finally(() => {",
      "    loading.value = false",
      "  })",
      "",
      "  const cancel = () => controller.abort()",
      "",
      "  return { response, loading, cancel }",
      "}"
    ],
    "description": "Axios Get Request"
  }
}
